
class VGG_K(nn.Module):
  def __init__(self, features, num_classes= 1000, init_weights=True):
    super(VGG_K, self).__init__()
    self.features = features
    self.avgpool = nn.AdaptiveAvgPool2d((7,7))
    self.classifier = nn.Sequential(
        nn.Linear(512 * 7 * 7 * 1, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(0.5),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(0.5),
            nn.Linear(4096, num_classes)
    )
    if init_weights:
      self._initialize_weights()
  def _initialize_weights(self):
    for m in self.modules():
      if isinstance(m, nn.Conv2d):
        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
        if m.bias is not None:
          nn.init.constant_(m.bias, 0)
      elif isinstance(m, nn.BatchNorm2d):
        nn.init.constant_(m.weight, 1)
        nn.init.constant_(m.bias, 0)
      elif isinstance(m, nn.Linear):
        nn.init.normal_(m.weight, 0, 0.01)
        nn.init.constant_(m.bias, 0)

  def forward(self, x):
    output = self.features(x)
    output = self.avgpool( output )
    output = output.view(output.size(0), -1)
    output = self.classifier(output)
    return output
vgg16_features = nn.Sequential(
        # 3 x 224 x 224
        nn.Conv2d(3, 64, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 64 x 112 x 112
        nn.Conv2d(64, 128, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(128, 128, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 128 x 56 x 56
        nn.Conv2d(128, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 256 x 28 x 28
        nn.Conv2d(256, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 512 x 14 x 14
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2)
        # 512 x 7 x 7
    )
vgg16 = VGG_K(vgg16_features)
model_ft = vgg16



vgg16_bn_features = nn.Sequential(
        # 3 x 224 x 224
        nn.Conv2d(3, 64, kernel_size=3, padding=1),
        nn.BatchNorm2d(64), 
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, kernel_size=3, padding=1),
        nn.BatchNorm2d(64), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 64 x 112 x 112
        nn.Conv2d(64, 128, kernel_size=3, padding=1),
        nn.BatchNorm2d(128),         
        nn.ReLU(inplace=True),
        nn.Conv2d(128, 128, kernel_size=3, padding=1),
        nn.BatchNorm2d(128), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 128 x 56 x 56
        nn.Conv2d(128, 256, kernel_size=3, padding=1),
        nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 256 x 28 x 28
        nn.Conv2d(256, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 512 x 14 x 14
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2)
        # 512 x 7 x 7
    )
vgg16_bn = VGG_K(vgg16_bn_features)




vgg19_features = nn.Sequential(
        # 3 x 224 x 224
        nn.Conv2d(3, 64, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 64 x 112 x 112
        nn.Conv2d(64, 128, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(128, 128, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 128 x 56 x 56
        nn.Conv2d(128, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
		nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 256 x 28 x 28
        nn.Conv2d(256, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
		nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 512 x 14 x 14
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
		nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2)
        # 512 x 7 x 7
    )
vgg19 = VGG_K(vgg19_features)
model_ft = vgg19



vgg19_bn_features = nn.Sequential(
        # 3 x 224 x 224
        nn.Conv2d(3, 64, kernel_size=3, padding=1),
		nn.BatchNorm2d(64), 
        nn.ReLU(inplace=True),
        nn.Conv2d(64, 64, kernel_size=3, padding=1),
		nn.BatchNorm2d(64), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 64 x 112 x 112
        nn.Conv2d(64, 128, kernel_size=3, padding=1),
		nn.BatchNorm2d(128), 
        nn.ReLU(inplace=True),
        nn.Conv2d(128, 128, kernel_size=3, padding=1),
		nn.BatchNorm2d(128), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 128 x 56 x 56
        nn.Conv2d(128, 256, kernel_size=3, padding=1),
		nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
		nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
		nn.Conv2d(256, 256, kernel_size=3, padding=1),
		nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.Conv2d(256, 256, kernel_size=3, padding=1),
		nn.BatchNorm2d(256), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 256 x 28 x 28
        nn.Conv2d(256, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
		nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2),
        # 512 x 14 x 14
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
		nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.Conv2d(512, 512, kernel_size=3, padding=1),
		nn.BatchNorm2d(512), 
        nn.ReLU(inplace=True),
        nn.MaxPool2d(2, 2)
        # 512 x 7 x 7
    )
vgg19_bn = VGG_K(vgg19_bn_features)
model_ft = vgg19_bn



